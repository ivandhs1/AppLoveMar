import { Component } from '@angular/core';
import { GameService } from '../../Services/game';
import { Router } from '@angular/router';
import { CommonModule } from '@angular/common';

@Component({
  selector: 'app-summary',
  imports: [CommonModule],
  templateUrl: './summary.html',
  styleUrl: './summary.css',
})
export class Summary {
    
  showModal = false;
  messageText = `
üíå Mensaje para mi Pollita ‚Äì 11/10/2025

Mi pollita hermosa, mi ni√±a, mi reina, mi amor üíñ

S√© que a veces hemos tenido discusiones, malentendidos o momentos en los que las palabras no salieron como quer√≠amos. 
Pero quiero que sepas, desde lo m√°s profundo de mi coraz√≥n, que nada de eso cambia lo que siento por ti.<br><br>

Te amo con todo lo que soy. Cada d√≠a pienso en ti, en tus risas, en tu forma de ver el mundo, 
en lo incre√≠ble que eres. Y aunque a veces no lo parezca, siempre busco la manera de acercarme a ti, 
de entenderte m√°s, de cuidarte mejor.<br><br>

Hice este peque√±o software con todo mi cari√±o, no solo como un detalle, sino como una forma de seguir 
construyendo puentes entre nosotros. Para que tengamos una manera m√°s linda y especial de comunicarnos, 
sin importar si estamos lejos o cerca.<br><br>

Porque t√∫ eres mi motivo, mi inspiraci√≥n y mi raz√≥n para seguir creando cosas bonitas. üíû

Con todo mi amor,
Tu ni√±o, el que siempre te va a amar üíï
11/10/2025 üíç
`;
  winnerName = 'Jugador 1'; // Puedes vincularlo desde tu l√≥gica real
  averageTime = 2.35;

  constructor(public game: GameService, private router: Router) {}

  get formattedResults() {
    return this.game.questions.map((q, index) => ({
      question: q,
      times: this.game.times[index] || {}
    }));
  }

  restartGame() {
    this.game.reset();
    this.router.navigate(['/']);
  }

  get totalTimePlayer1() {
    const name = this.game.players[0].name;
    return this.sumTimesFor(name);
  }

  get totalTimePlayer2() {
    const name = this.game.players[1].name;
    return this.sumTimesFor(name);
  }

  private sumTimesFor(name: string): number {
    return this.game.times
      .map(entry => entry.playerTimes[name] || 0) // üëà aqu√≠ accedemos correctamente
      .reduce((a, b) => a + b, 0);
  }

openMessage() {
  this.showModal = true;

  // Espera a que el modal se renderice y luego reproduce el audio
  setTimeout(() => {
    const audio = document.getElementById('romanticAudio') as HTMLAudioElement;
    if (audio) audio.play().catch(err => console.log('Autoplay bloqueado:', err));
  }, 300);
}

  closeMessage() {
    this.showModal = false;
  }
}